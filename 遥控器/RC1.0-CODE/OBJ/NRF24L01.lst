C51 COMPILER V9.00   NRF24L01                                                              05/10/2015 20:44:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN .\OBJ\NRF24L01.obj
COMPILER INVOKED BY: D:\Program Files\Keil\C51\BIN\C51.EXE USER\NRF24L01.C COMPACT BROWSE INCDIR(.\USER) DEBUG OBJECTEXT
                    -END PRINT(.\OBJ\NRF24L01.lst) OBJECT(.\OBJ\NRF24L01.obj)

line level    source

   1          #include "sysconfig.h"
   2          #include <intrins.h>
   3          #include <NRF24L01.H>
   4          
   5          unsigned char idata TxBuf[24]={0};
   6          unsigned char idata RxBuf[24]={0};
   7          
   8          // 无线地址设置
   9          //地址一共40个add bit是add0~add39
  10          //在401地址先写(add0,add1,add2......add39)
  11          
  12          //2401和51822地址关系
  13          // 2401[add0 :add7] =PREFIX0[bit7:bit0](add7,add6,add5,add4,add3,add2,add1,add0)
  14          // 2401[add8 :add15]=BASE0[bit31:bit24](add15,add14,add13,add12,add11,add10,add9,add8)
  15          // 2401[add16:add23]=BASE0[bit23:bit16](add23,add22,add21,add20,add19,add18,add17,add16)
  16          // 2401[add24:add31]=BASE0[bit15:bit8] (add31,add30,add29,add28,add27,add26,add25,add24)
  17          // 2401[add32:add39]=BASE0[bit7 :bit0] (add39,add38,add37,add36,add35,add34,add33,add32)
  18          
  19          ////通道3到0的低字节
  20          //      NRF_RADIO->PREFIX0 =(0x23<<24) //通道3的低字节地址
  21          //                         |(0xC3<<16) //通道2的低字节地址
  22          //                         |(0x43<< 8) //通道1的低字节地址
  23          //                         |(0xE7<< 0);//通道0的低字节地址 对应2401地址的[add7:add0]
  24          //// í¨μà7 μ? 4 μ?μí×??úμ??・
  25          //      NRF_RADIO->PREFIX1 =(0x13<<24) //通道7的低字节地址
  26          //                         |(0xE3<<16) //通道6的低字节地址
  27          //                         |(0x63<< 8) //通道5的低字节地址
  28          //                         |(0xA3<< 0);//通道4的低字节地址
  29          // 
  30          //  NRF_RADIO->BASE0   = (0xE7<<24)  //通道0的高字节对应2401的[add15:add8]
  31          //                      |(0xE7<<16)  //对应2401的[add23:add16]
  32          //                          |(0xE7<<8)   //对应2401的[add31:add24]
  33          //                          |(0xE7<<0);  //对应2401的[add39:add32]
  34          
  35          //  NRF_RADIO->BASE1   = (0x43<<24)  //通道1-7的高字节
  36          //                      |(0x43<<16)
  37          //                          |(0x43<<8)
  38          //                          |(0x43<<0);
  39          //以上结论得出2401的地址是每8个bit首尾对调，以下是官方用的地址
  40          const u8  ip[6]={0xE7,0xE7,0xE7,0xE7,0xE7,0x00};//・￠é?μ??・  ′ó[bit0~7] [bit8~15] [bit16~23] [bit24~
             -31] [bit32~39]
  41          const u8 ip0[6]={0xE7,0xE7,0xE7,0xE7,0xE7,0x00};//?óê?μ??・0 oí51822í¨???òμ÷á?(bit0?èD′)
  42          
  43          const u8 ip1[6]={0xC2,0xC2,0xC2,0xC2,0xC2,0x00};//?óê?μ??・1 bit39~bit8?a"0x43"(bit0?èD′)
  44          
  45          const u8 ip2[6]={0xC3,0x00};//?óê?μ??・2 bit39~8oíí¨μà112ó?,??D′bit0~bit7
  46          const u8 ip3[6]={0xC4,0x00};//?óê?μ??・3     í¨μà2345???üéè??char
  47          const u8 ip4[6]={0xC5,0x00};//?óê?μ??・4     D′μ?ê±oò?3Dòê?bit0~bit39
  48          const u8 ip5[6]={0xC6,0x00};//?óê?μ??・5             ??óDbit0~7óDó??￡?óê?μ??・6￡o0xC7 ?óê?μ??・7￡o0xC8
  49          
  50          u8 caout[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é・￠é?μ??・
  51          u8 caip0[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é?óê?μ??・0
  52          u8 caip1[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é?óê?μ??・1
  53          u8 caip2[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é?óê?μ??・2
C51 COMPILER V9.00   NRF24L01                                                              05/10/2015 20:44:51 PAGE 2   

  54          u8 caip3[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é?óê?μ??・3
  55          u8 caip4[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é?óê?μ??・4
  56          u8 caip5[6]={0xff,0xff,0xff,0xff,0xff,0x00};//ó?óú?ì2é?óê?μ??・5
  57          u8 careg[2]={0xff,0x00};//ó?óú2é?′??′??÷μ??μ
  58          //const u8 TX_ADDRESS[TX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //・￠?íμ??・
  59          //const u8 RX_ADDRESS[RX_ADR_WIDTH]={0x34,0x43,0x10,0x10,0x01}; //・￠?íμ??・
  60                  
  61          /****************************************************************************************************
  62          /*函数：uint SPI_RW(uint uchar)
  63          /*功能：NRF24L01的SPI写时序
  64          /****************************************************************************************************/
  65          u16 SPI_RW(u16 uchar)
  66          {
  67   1              u16 bit_ctr;
  68   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
  69   1              {
  70   2                      MOSI = (uchar & 0x80);         // output 'uchar', MSB to MOSI
  71   2                      uchar = (uchar << 1);           // shift next bit into MSB..
  72   2                      SCK = 1;                      // Set SCK high..
  73   2                      delayus(12);
  74   2                      uchar |= MISO;                    // capture current MISO bit
  75   2                      delayus(12);
  76   2                      SCK = 0;                          // ..then set SCK low again
  77   2              }
  78   1          return(uchar);                        // return read uchar
  79   1      }
  80          /****************************************************************************************************
  81          /*函数：uchar SPI_Read(uchar reg)
  82          /*功能：NRF24L01的SPI时序
  83          /****************************************************************************************************/
  84          u8 SPI_Read(u8 reg)
  85          {
  86   1              u8 reg_val;
  87   1              
  88   1              CSN = 0;                // CSN low, initialize SPI communication...
  89   1              delayus(12);
  90   1              SPI_RW(reg);            // Select register to read from..
  91   1              delayus(12);
  92   1              reg_val = SPI_RW(0);    // ..then read registervalue
  93   1              delayus(12);
  94   1              CSN = 1;                // CSN high, terminate SPI communication
  95   1              
  96   1              return(reg_val);        // return register value
  97   1      }
  98          
  99          /****************************************************************************************************/
 100          /*功能：NRF24L01写寄存器函数
 101          /****************************************************************************************************/
 102          u8 NRF24L01_Write_Reg(u8 reg,u8 value)
 103          {
 104   1              u16 status;
 105   1              
 106   1              CSN = 0;                   // CSN low, init SPI transaction
 107   1              status = SPI_RW(reg);      // select register
 108   1              SPI_RW(value);             // ..and write value to it..
 109   1              CSN = 1;                   // CSN high again
 110   1              
 111   1              return(status);            // return nRF24L01 status uchar
 112   1      }
 113          /****************************************************************************************************/
 114          /*功能：NRF24L01读寄存器函数
 115          /****************************************************************************************************/
C51 COMPILER V9.00   NRF24L01                                                              05/10/2015 20:44:51 PAGE 3   

 116          u8 NRF24L01_Read_Reg(u8 reg)
 117          {
 118   1              u8 status;
 119   1              
 120   1              CSN = 0;                   // CSN low, init SPI transaction
 121   1              SPI_RW(reg);      // select register
 122   1              status =SPI_RW(0xff);             // ..and write value to it..
 123   1              CSN = 1;                   // CSN high again    
 124   1              return(status);            // return nRF24L01 status uchar
 125   1      }
 126          /****************************************************************************************************/
 127          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 128          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 129          /****************************************************************************************************/
 130          //u16 SPI_Read_Buf(u8 reg, u8 *pBuf, u8 uchars)
 131          u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len)
 132          {
 133   1              u16 status,uchar_ctr;
 134   1              
 135   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 136   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 137   1              
 138   1              for(uchar_ctr=0;uchar_ctr<len;uchar_ctr++)
 139   1                      pBuf[uchar_ctr] = SPI_RW(0xff);    // 
 140   1              
 141   1              CSN = 1;                           
 142   1              
 143   1              return(status);                    // return nRF24L01 status uchar
 144   1      }
 145          /*********************************************************************************************************
 146          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 147          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 148          /*********************************************************************************************************
             -/
 149          //u16 SPI_Write_Buf(u8 reg, u8 *pBuf, u8 uchars)
 150          u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len)
 151          {
 152   1              u16 status,uchar_ctr;
 153   1              
 154   1              CSN = 0;            //SPI使能       
 155   1              status = SPI_RW(reg);   
 156   1              for(uchar_ctr=0; uchar_ctr<len; uchar_ctr++) //
 157   1                      SPI_RW(*pBuf++);
 158   1              CSN = 1;           //关闭SPI
 159   1              return(status);    // 
 160   1      }
 161          
 162          /*********************************************************************************************************
             -**
 163          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 164          /*功能：发送 tx_buf中数据
 165          /*********************************************************************************************************
             -*/
 166          u8 NRF24L01_TxPacket(u8 *txbuf)
 167          {
 168   1              u8 sta;
 169   1              //SPI1_SetSpeed(SPI_BaudRatePrescaler_8);//spi?ù?è?a10.5Mhz￡¨24L01μ?×?′óSPIê±?ó?a10Mhz￡?   
 170   1              CE=0;
 171   1              NRF24L01_Write_Buf(0xA0,txbuf,32);//D′êy?Yμ?TX BUF  32??×??ú
 172   1              CE=1;//???ˉ・￠?í        
 173   1              while(IRQ!=0);//μè′y・￠?ííê3é
 174   1              sta=NRF24L01_Read_Reg(0x07);  //?áè?×′ì???′??÷μ??μ        
C51 COMPILER V9.00   NRF24L01                                                              05/10/2015 20:44:51 PAGE 4   

 175   1              NRF24L01_Write_Reg(0x20+0x07,sta); //??3yTX_DS?òMAX_RT?D??±ê??
 176   1              
 177   1              if(sta&0x10)//′?μ?×?′ó??・￠′?êy
 178   1              {
 179   2                      NRF24L01_Write_Reg(0xE1,0xff);//??3yTX FIFO??′??÷ 
 180   2                      return MAX_TX; 
 181   2              }
 182   1              if(sta&0x20)//・￠?ííê3é
 183   1              {
 184   2                 // LCD_ShowString(50,40,"OK!");
 185   2                      //LED0=!LED0;
 186   2                      return TX_OK;
 187   2              }
 188   1              return 0xff;//?????-òò・￠?íê§°ü
 189   1      
 190   1      }
 191          /******************************************************************************************************/
 192          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 193          /*功能：数据读取后放如rx_buf接收缓冲区中
 194          /******************************************************************************************************/
 195          u8 NRF24L01_RxPacket(u8 *rxbuf)
 196          {
 197   1              u8 sta;                                                                    
 198   1              sta=NRF24L01_Read_Reg(0x07);  //读取状态寄存器的值       
 199   1              NRF24L01_Write_Reg(0x20+0x07,sta); //清除TX_DS或MAX_RT中断标志
 200   1              careg[0]=sta;
 201   1              if(sta&0x40)//接收到数据 wei 6
 202   1              {       
 203   2                      NRF24L01_Read_Buf(0x61,rxbuf,32);//读取数据
 204   2                      NRF24L01_Write_Reg(0xe2,0xff);//清除RX FIFO寄存器 
 205   2                      return 1; //接收成功
 206   2              }          
 207   1              return 0;//无数据
 208   1      }
 209          /****************************************************************************************************/
 210          /*函数：void SetRX_Mode(void)
 211          /*功能：数据接收配置 
 212          /****************************************************************************************************/
 213          void NRF24L01_RX_Mode(u8 FQ)
 214          {
 215   1              CE=0;
 216   1          NRF24L01_Write_Reg(0x20+0x00,0x0f);//配置接收的基本参数，PWR_UP,EN_CRC,16BIT_CRC,
 217   1          NRF24L01_Write_Reg(0x20+0x01,0x00);//应答设置 0X3F代表54321 应答
 218   1      //      NRF24L01_Read_Buf(0x01,careg,1);   //??oˉêy?ì2é?T????′??÷0x01μ??úèY
 219   1          NRF24L01_Write_Reg(0x20+0x02,0x3f);//接收通道使能 0X3F代表54321 接收
 220   1              NRF24L01_Write_Reg(0x20+0x05,FQ); //RF频率设置
 221   1              NRF24L01_Write_Reg(0x20+0x06,0x0f);     //设置TX参数 0DB 2MPBS 低噪声增益开
 222   1      //      NRF24L01_Write_Reg(0x20+0x06,0xa7);
 223   1      
 224   1              NRF24L01_Write_Buf(0X20+0X0a,(u8*)ip0,5);//写RX0接收地址
 225   1      //      NRF24L01_Read_Buf(0x0a,caip0,5);         //2éμ??・è・?¨ò?D′è?
 226   1              NRF24L01_Write_Buf(0X20+0X0b,(u8*)ip1,5);//写RX1接收地址
 227   1      //      NRF24L01_Read_Buf(0x0b,caip1,5);
 228   1              NRF24L01_Write_Buf(0X20+0X0c,(u8*)ip2,1); //写RX2接收地址
 229   1      //      NRF24L01_Read_Buf(0x0c,caip2,5);
 230   1              NRF24L01_Write_Buf(0X20+0X0d,(u8*)ip3,1);////写RX3接收地址 
 231   1      //      NRF24L01_Read_Buf(0x0d,caip3,5);
 232   1              NRF24L01_Write_Buf(0X20+0X0e,(u8*)ip4,1);//写RX4接收地址
 233   1      //      NRF24L01_Read_Buf(0x0e,caip4,5);
 234   1              NRF24L01_Write_Buf(0X20+0X0f,(u8*)ip5,1);//写RX4接收地址
 235   1      //      NRF24L01_Read_Buf(0x0f,caip5,5);
 236   1              NRF24L01_Write_Buf(0X20+0X10,(u8*)ip1,5);//D′TXμ?μ??・
C51 COMPILER V9.00   NRF24L01                                                              05/10/2015 20:44:51 PAGE 5   

 237   1      //      NRF24L01_Read_Buf(0x10,caout,5);
 238   1      
 239   1              NRF24L01_Write_Reg(0x20+0x11,32);//0通道有效数据宽度
 240   1              NRF24L01_Write_Reg(0x20+0x12,32);//0通道有效数据宽度 
 241   1              NRF24L01_Write_Reg(0x20+0x13,32);//0通道有效数据宽度
 242   1              NRF24L01_Write_Reg(0x20+0x14,32);//0通道有效数据宽度 
 243   1              NRF24L01_Write_Reg(0x20+0x15,32);//0通道有效数据宽度
 244   1              NRF24L01_Write_Reg(0x20+0x16,32);//0通道有效数据宽度            
 245   1              CE = 1; 
 246   1      }
 247          void NRF24L01_TX_Mode(u8 FQ)
 248          {
 249   1          CE = 0;
 250   1              NRF24L01_Write_Buf(0x20+0x10,(u8*)ip,5);//D′TX・￠é?μ??・ 
 251   1              NRF24L01_Write_Buf(0x20+0x0a,(u8*)ip0,5); 
 252   1      
 253   1              NRF24L01_Write_Reg(0x20+0x01,0x00);    
 254   1              NRF24L01_Write_Reg(0x20+0x02,0x3f);  
 255   1              NRF24L01_Write_Reg(0x20+0x04,0xff);
 256   1              NRF24L01_Write_Reg(0x20+0x05,FQ);    
 257   1              NRF24L01_Write_Reg(0x20+0x06,0x0f);  
 258   1      //      NRF24L01_Write_Reg(0x20+0x06,0xa7);
 259   1              NRF24L01_Write_Reg(0x20+0x00,0x0e);  
 260   1      
 261   1              CE = 1;
 262   1      }
 263          //?ì2a24L01ê?・?′??ú
 264          //・μ???μ:0￡?3é1|;1￡?ê§°ü      
 265          u8 NRF24L01_Check(void)
 266          {
 267   1              u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 268   1              u8 i; 
 269   1              NRF24L01_Write_Buf(WRITE_REG+TX_ADDR,buf,5);//D′è?5??×??úμ?μ??・. 
 270   1              NRF24L01_Read_Buf(TX_ADDR,buf,5); //?á3?D′è?μ?μ??・  
 271   1              for(i=0;i<5;i++)if(buf[i]!=0XA5)break;                                                             
 272   1              if(i!=5)return 1;//?ì2a24L01′í?ó    
 273   1              return 0;                //?ì2aμ?24L01
 274   1      }        
 275                   
 276          
 277          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    839    ----
   CONSTANT SIZE    =      5    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     86      39
   DATA SIZE        =   ----    ----
   IDATA SIZE       =     48    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
